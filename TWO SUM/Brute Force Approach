// https://leetcode.com/problems/two-sum/

/*

Approach 1: Brute Force Algorithm

The brute force approach is simple. Loop through each element x and find if there is another value that equals to target - x.

*/


class Solution {
public:

    vector<int> twoSum(vector<int>& nums, int target) {
      
        int n=nums.size();
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(target-nums[j]==nums[i])
                { return {i,j}; }
                
            }
            
        }
        return {};      // In case there is no solution, we'll just return null {}
    } 
};



/*

Complexity Analysis

Time complexity: O(n^2).
For each element, we try to find its complement by looping through the rest of the array which takes O(n) time. Therefore, the time complexity is O(n^2).

Space complexity: O(1).
The space required does not depend on the size of the input array, so only constant space is used.

*/
